A push_back() on a vector is generally more efficient than an insert because push_back always interacts with as few elements of the vector as possible. In best case, a push_back increases the size of the vector by one element and changes the value of one element's worth of memory in the already allocated capacity. A best case insert would be very similar, choosing to insert after the last existing element of the vector, the size is increased by one and only the one memory write occurs.
A true worst case for either would occur when an increase in capacity was needed, but as this would effect both operations approximately equally, that aspect of the worst case will be ignored.
A non-capacity exceeding worst case for push_back looks exactly like a best case: a single element's worth of memory is written within the allocated space, and the size increases by one. A worst-case insert (non-capacity exceeding, and assuming inserting only one element for parity of comparison with push_back) occurs when the insert occurs at the very beginning of the vector. To keep all the elements sequential, every element in the vector must be re-written to a location one farther than it was previously at to create a space for the new element, changing the number of memory operations from one to one plus however many elements already existed within the vector.
